{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputvalue","setInputvalue","onSubmit","e","preventDefault","trim","length","catego","type","value","onChange","target","propType","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"wPAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAc9C,OACI,0BAAMC,SAVU,SAACC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IACxBR,GAAe,SAAAS,GAAM,OAAMP,GAAN,mBAAqBO,OAC1CN,EAAc,OAOf,2CACA,2BAAOO,KAAK,OAAOC,MAAOT,EAAaU,SAfnB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,YAmB/BZ,EAAYe,SAAS,CACjBd,c,OAAgBe,EAAUC,KAAKC,Y,2BC1BtBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEKI,MAAMF,GAFX,cAEbG,EAFa,gBAGGA,EAAUC,OAHb,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAYZM,GAZY,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAEhC,OACI,yBAAKc,UAAU,0CACZ,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCHFO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EACflB,mBAAS,CAC/ByB,KAAK,GACLa,SAAS,IAH4B,mBAClCC,EADkC,KAC3BC,EAD2B,KAgBzC,OATCC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACfH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEEqB,EDb6BK,CAAc1B,GAAnCa,EAFuB,EAE5BN,KAAca,EAFc,EAEdA,QAEvB,OACI,oCACI,wBAAIJ,UAAU,qCAAd,IAAoDhB,EAApD,KACCoB,GAAW,uBAAGJ,UAAU,sCAAb,eACZ,yBAAKA,UAAU,aACNH,EAAOJ,KAAM,SAAAC,GAAG,OACb,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAAQD,UEcvCkB,EAxBM,SAAAC,GAAU,IAAD,EAEU/C,mBAAS,CAAC,eAFpB,mBAEnBgD,EAFmB,KAEPjD,EAFO,KAQ1B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEQiD,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CAAS2B,IAAK3B,EAAUA,SAAUA,UCf1D+B,IAASC,OACL,kBAAC,EAAD,MAAiBC,SAASC,eAAe,W","file":"static/js/main.73028292.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    const [inputvalue, setInputvalue] = useState(''); //Para evitar el undefine se coloca un string vacio\r\n    const hasndleInputChanche = (e)=>{   //para manejar el evento al presionar enter \r\n        setInputvalue(e.target.value);\r\n    }\r\n    const handleSubmit= (e)=>{\r\n        e.preventDefault();\r\n        if (inputvalue.trim().length>2) { //Valida que el input no este vacio \r\n             setCategories( catego => [ inputvalue, ...catego,] ); //AÃ±ade al arreglo el elemento ...catego es para respetar los valores que se encuentran en el arreglo \r\n             setInputvalue(''); //No inserta si nada \r\n        }\r\n       \r\n        //console.log('Submit hecho')\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h2>AddCategory</h2>\r\n            <input type=\"text\" value={inputvalue}  onChange={hasndleInputChanche} ></input>  \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propType={\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=2zAcQUJAf1kNvmKxH6M304FgNi16PwAF`;\r\n    const respuesta = await fetch(url);\r\n    const { data }= await respuesta.json();\r\n    const gifs = data.map(img=>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n  \r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title,url} ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n           <img src={url} alt={title}></img>\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n    const {  data:images , loading } = useFetchGifs( category );\r\n      \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n            {loading && <p className=\" animate__animated animate__flash \">Cargando...</p> }\r\n            <div className=\"card-grid\">           \r\n                    {images.map ( img =>(\r\n                        <GifGridItem key={img.id} {...img} />\r\n                    ))}            \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n   const [state, setState] = useState({\r\n       data:[],\r\n       loading: true\r\n   });\r\n\r\n   //realiza la peticion para cargar las imagenes\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => {    \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n        })       \r\n    }, [category])\r\n\r\n   return state;\r\n}\r\n","import React,{useState}from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = props => {\r\n \r\n    const [categories, setCategories] = useState(['Halo Reach']);\r\n   /*  const handleAdd= ()=>{\r\n       //setCategories([...categories,'Ghost']);\r\n       setCategories(catego=>[...catego,'Ghost']);\r\n    }\r\n */\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr/>\r\n            <ol>\r\n                { \r\n                    categories.map( category => (\r\n                        <GifGrid key={category} category={category} />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,document.getElementById('root')\n);\n\n"],"sourceRoot":""}